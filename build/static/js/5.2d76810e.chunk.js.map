{"version":3,"sources":["Pages/Rooms/Rooms.js"],"names":["Rooms","props","DeviceIO","event","a","device_name","target","getAttribute","status","console","log","setAttribute","valueOfDb","fetch","Host","host","method","headers","body","reponse","json","data","roomname","match","params","state","appliances","isappliances","routes","ourRouteKey","response","map","app","fields","a_room","push","this","setState","className","style","padding","textTransform","eachAppliance","a_io","onClick","name","value","a_name","key","Component"],"mappings":"iPAMMA,E,YACF,WAAYC,GAAO,IAAD,uBACd,4CAAMA,KA+CTC,SAhDiB,uCAgDN,WAAOC,GAAP,uBAAAC,EAAA,6DACJC,EAAcF,EAAMG,OAAOC,aAAa,SACxCC,EAASL,EAAMG,OAAOC,aAAa,UACvCE,QAAQC,IAAIL,EAAYG,GACkB,MAAvCL,EAAMG,OAAOC,aAAa,WAEzBJ,EAAMG,OAAOK,aAAa,QAAQ,aAClCR,EAAMG,OAAOK,aAAa,SAAS,SAInCR,EAAMG,OAAOK,aAAa,QAAQ,8BAClCR,EAAMG,OAAOK,aAAa,SAAS,OAOnCC,EAAsB,OAAVJ,EAChBC,QAAQC,IAAIE,GApBJ,SAqBYC,MAChB,UAAUC,IAAKC,KAAK,gBACpB,CACIC,OAAO,OACPC,QACA,CACI,eAAe,qCAEnBC,KAAK,aAAab,EAAY,SAASO,IA7BvC,cAqBJO,EArBI,iBAiCSA,EAAQC,OAjCjB,QAiCJC,EAjCI,OAmCRZ,QAAQC,IAAIW,GAnCJ,4CAhDM,0DAGTC,EAAY,EAAKrB,MAAMsB,MAAMC,OAA7BF,SAHS,OAId,EAAKG,MAAQ,CACTH,SAASA,EACTI,WAAW,GACXC,cAAa,GAGjB,EAAKD,WAAa,GAElB,EAAKE,OAAS,CACV,KAAO,EACP,QAAU,EACV,QAAU,GAGdnB,QAAQC,IAAI,EAAKe,MAAMH,UACvB,EAAKO,YAAc,EAAKD,OAAO,EAAKH,MAAMH,UAnB5B,E,wNAuBOT,MAAM,UAAUC,IAAKC,KAAK,mB,cAA3Ce,E,gBACaA,EAASV,O,cAErBW,KAAI,SAAAC,GACFA,EAAIC,OAAOC,QAAU,EAAKL,aAC1B,EAAKH,WAAWS,KAAKH,EAAIC,WAMhCxB,QAAQC,IAAI0B,KAAKV,YACjBU,KAAKC,SACD,CACIX,WAAWU,KAAKV,WAChBC,cAAa,IAEjB,WACIlB,QAAQC,IAAI,c,qIA4Cf,IAAD,OACJ,OACI,yBAAK4B,UAAU,aACX,kBAAC,IAAD,MACA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,qBAAqBC,MAAO,CAACC,QAAQ,OAAOC,cAAc,cACpEL,KAAKX,MAAMH,UAEhB,yBAAKgB,UAAU,SAEPF,KAAKX,MAAMC,WAAWK,KAAI,SAAAW,GAEtB,OADAjC,QAAQC,IAAIgC,EAAcC,MAE1B,yBAAKC,QAAS,EAAK1C,SAAU2C,KAAK,SAASrC,OAAO,KAAKsC,MAAOJ,EAAcK,OAAQC,IAAKN,EAAcK,OAAQT,UAAiC,GAAtBI,EAAcC,KAAa,8BAA8B,cAE1KD,EAAcK,aAQvC,kBAAC,IAAD,W,GA7GIE,aAmHLjD","file":"static/js/5.2d76810e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Navbar from '../../Components/Navbar/Navbar';\r\nimport './Rooms.css'\r\nimport Footer from '../../Components/Footer/Footer';\r\nimport Host from '../../myIp';\r\n\r\nclass Rooms extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        let {roomname} = this.props.match.params;\r\n        this.state = {\r\n            roomname:roomname,\r\n            appliances:[],\r\n            isappliances:false\r\n        }\r\n\r\n        this.appliances = [];\r\n\r\n        this.routes = {\r\n            'hall':1,\r\n            'bedroom':5,\r\n            'kitchen':3\r\n        }\r\n\r\n        console.log(this.state.roomname)\r\n        this.ourRouteKey = this.routes[this.state.roomname];\r\n    }\r\n\r\n    async componentDidMount(){\r\n        let response = await fetch(\"http://\"+Host.host+\":8000/popu/air/\");\r\n        let data = await response.json();\r\n        \r\n        data.map(app=>{\r\n            if(app.fields.a_room == this.ourRouteKey){\r\n               this.appliances.push(app.fields); \r\n            }\r\n\r\n            \r\n        })\r\n\r\n        console.log(this.appliances)\r\n        this.setState(\r\n            {\r\n                appliances:this.appliances,\r\n                isappliances:true\r\n            },\r\n            ()=>{\r\n                console.log(\"Fetched\")\r\n            }\r\n        );\r\n\r\n\r\n    }\r\n\r\n     DeviceIO = async (event)=>{\r\n        let device_name = event.target.getAttribute(\"value\");\r\n        let status = event.target.getAttribute(\"status\");\r\n        console.log(device_name,status)\r\n        if(event.target.getAttribute(\"status\") == \"on\"){\r\n\r\n            event.target.setAttribute(\"class\",\"appliance\");\r\n            event.target.setAttribute(\"status\",\"off\");\r\n\r\n            \r\n        }else{\r\n            event.target.setAttribute(\"class\",\"appliance appliance_active\");\r\n            event.target.setAttribute(\"status\",\"on\");\r\n        }\r\n\r\n\r\n\r\n\r\n        // Send API Request to Server from Here\r\n        let valueOfDb = status == \"off\"?true:false;\r\n        console.log(valueOfDb)\r\n        let reponse = await fetch(\r\n            \"http://\"+Host.host+\":8000/iot/io/\",\r\n            {\r\n                method:\"POST\",\r\n                headers:\r\n                {\r\n                    'Content-Type':'application/x-www-form-urlencoded'\r\n                },\r\n                body:\"appliance=\"+device_name+\"&a_io=\"+valueOfDb\r\n            }\r\n        );\r\n\r\n        let data = await reponse.json();\r\n\r\n        console.log(data)\r\n    }\r\n    render(){\r\n        return(\r\n            <div className='container'>\r\n                <Navbar />\r\n                <div className='roomContainer'>\r\n                    <div className='rooms-title ripple' style={{padding:'10px',textTransform:\"uppercase\"}}>\r\n                        {this.state.roomname}\r\n                    </div>\r\n                    <div className='rooms'>\r\n                        {\r\n                            this.state.appliances.map(eachAppliance=>{\r\n                                console.log(eachAppliance.a_io)\r\n                                return(\r\n                                <div onClick={this.DeviceIO} name=\"device\" status=\"on\" value={eachAppliance.a_name} key={eachAppliance.a_name} className={eachAppliance.a_io == true?'appliance  appliance_active':'appliance '}>\r\n                                    \r\n                                        {eachAppliance.a_name}\r\n                                   \r\n                                </div>\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Rooms"],"sourceRoot":""}